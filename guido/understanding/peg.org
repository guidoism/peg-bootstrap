This is my first attempt at literate programming with Org Mode where
I'm trying to create a self-compiling PEG parser.

* The rules

#+TBLNAME: rules
| sp                | <- | ' '                                                     |    |                          |   |
|                   | /  | '\n'                                                    |    |                          |   |
|                   | /  | '\t'                                                    |    |                          | . |
| sps               | <- | sp sps                                                  |    |                          |   |
|                   | /  |                                                         |    |                          | . |
| rule              | <- | n: name sps '<-' sps body: choice '.' sps               | -> | rule_template            | . |
| grammar           | <- | sps r: rule g: grammar                                  | -> | grammar_template1        |   |
|                   | /  | sps r: rule                                             | -> | grammar_template2        | . |
| meta              | <- | '!'                                                     |    |                          |   |
|                   | /  | '\''                                                    |    |                          |   |
|                   | /  | '<-'                                                    |    |                          |   |
|                   | /  | '/'                                                     |    |                          |   |
|                   | /  | '.'                                                     |    |                          |   |
|                   | /  | '('                                                     |    |                          |   |
|                   | /  | ')'                                                     |    |                          |   |
|                   | /  | ':'                                                     |    |                          |   |
|                   | /  | '->'                                                    |    |                          | . |
| name              | <- | c: namechar n: name                                     | -> | name_template            |   |
|                   | /  | namechar                                                |    |                          | . |
| namechar          | <- | !meta !sp char                                          |    |                          | . |
| term              | <- | labeled                                                 |    |                          |   |
|                   | /  | nonterminal                                             |    |                          |   |
|                   | /  | string                                                  |    |                          |   |
|                   | /  | negation                                                |    |                          |   |
|                   | /  | parenthesized                                           |    |                          | . |
| nonterminal       | <- | n: name sps                                             | -> | nonterminal_template     | . |
| labeled           | <- | label: name sps ':' sps value: term                     | -> | labeled_template         | . |
| sequence          | <- | foo: term  bar: sequence                                | -> | sequence_template1       |   |
|                   | /  | result_expression                                       |    |                          |   |
|                   | /  |                                                         | -> | sequence_template2       | . |
| string            | <- | '\'' s: stringcontents '\'' sps                         | -> | string_template          | . |
| stringcontents    | <- | !'\\' !'\'' c: char s: stringcontents                   | -> | stringcontents_template1 |   |
|                   | /  | b: '\\' c: char s: stringcontents                       | -> | stringcontents_template2 |   |
|                   | /  |                                                         | -> | stringcontents_template3 | . |
| choice            | <- | a: sequence '/' sps  b: choice                          | -> | choice_template          |   |
|                   | /  | sequence                                                |    |                          | . |
| negation          | <- | '!' sps t: term                                         | -> | negation_template        | . |
| result_expression | <- | '->' sps result: expr sps                               | -> | result_expr_template     | . |
| expr              | <- | '(' sps e: exprcontents ')'                             | -> | expr_template            | . |
| exprcontents      | <- | c: (!'(' !')' (location / char) / expr) e: exprcontents | -> | exprcontents_template1   |   |
|                   | /  |                                                         | -> | exprcontents_template2   | . |
| location          | <- | 'ยง' n: name                                             | -> | location_template        | . |
| parenthesized     | <- | '(' sps body: choice ')' sps                            | -> | body_template            | . |


* Helper scripts to tie everything together at the end

This is butt-ugly code, it's stupid and dumb but it worked to get me
started and I don't want to mess with it. Instead I will start an Org
file from scratch that does this in a smarter way.

This is the code that needs to be tangle everything up into source
files that we can use with the Makefile.

To compile, we place our cursor inside of the code block and type

  C-c C-c

This will save the files to this directory. It will also update the
results in this file below with the last PEG, but this is only for
quick at-a-glance debugging -- We don't actually use that block.

The next step is to go to the terminal and type:

  make
  
#+PROPERTY: header-args:python :var filename=(buffer-file-name)

#+NAME: pegfile
#+BEGIN_SRC python :var rules=rules :noweb yes
  <<js_src_blocks>>
  name_size = max(len(r[0]) for r in rules)
  out = []
  for (name, larrow, body, rarrow, action, end) in rules:
      if action and action[0] != '(':
          action = blocks.get(action) or 'NOT FOUND'
      out.append(f"{name.ljust(name_size)} {larrow} {body} {rarrow} {action} {end}")
  output = '\n'.join(out)
  output = output.replace('sps', '_')
  open('literate.a.peg', 'w').write(output)

  out = []
  for (name, larrow, body, rarrow, action, end) in rules:
      if action and action[0] != '(':
          b_action = f'B.{action}'
          action = blocks.get(b_action) or blocks.get(action) or 'NOT FOUND'
      out.append(f"{name.ljust(name_size)} {larrow} {body} {rarrow} {action} {end}")
  output = '\n'.join(out)
  output = output.replace('sps', '_')
  open('literate.b.peg', 'w').write(output)

  out = []
  for (name, larrow, body, rarrow, action, end) in rules:
      if action and action[0] != '(':
          b_action = f'C.{action}'
          action = blocks.get(b_action) or blocks.get(action) or 'NOT FOUND'
      out.append(f"{name.ljust(name_size)} {larrow} {body} {rarrow} {action} {end}")
  output = '\n'.join(out)
  output = output.replace('sps', '_')
  open('literate.c.peg', 'w').write(output)

  out = []
  for (name, larrow, body, rarrow, action, end) in rules:
      if action and action[0] != '(':
          d_action = f'D.{action}'
          # We absolutely need the d_action or this won't work with the vars
          action = blocks.get(d_action) or 'NOT FOUND'
      out.append(f"{name.ljust(name_size)} {larrow} {body} {rarrow} {action} {end}")
  output = '\n'.join(out)
  output = output.replace('sps', '_')
  open('literate.d.peg', 'w').write(output)

  out = []
  for (name, larrow, body, rarrow, action, end) in rules:
      if action and action[0] != '(':
          d_action = f'D.{action}'
          e_action = f'E.{action}'
          action = blocks.get(e_action) or blocks.get(d_action) or 'NOT FOUND'
      out.append(f"{name.ljust(name_size)} {larrow} {body} {rarrow} {action} {end}")
  output = '\n'.join(out)
  output = output.replace('sps', '_')
  open('literate.e.peg', 'w').write(output)

  return output
#+END_SRC

The C-series templates move the variables from Javascript
function-scoped `var`-style variables to a function-scoped dictionary
called `vars` which will be used by the `format` function.

After these templates are run then we will have a parser than can
accept templates that make use of the vars dictionary, which is what
the D-series templates will do.

The E-series templates are the last step until we move to lower-level
languages like C and assembly. We move the local vars dictionary to a
global append-only list where we keep track of the function id,
position in the input, and the label to be stored. We also moved the
strings to a global append-only string buffer which keeps track of the
string size and string bytes and allows for the use of a handle into
it, which is really just an index that points to the string length.

#+RESULTS: pegfile
#+begin_example
sp                <- ' '   
                  / '\n'   
                  / '\t'   .
_               <- sp _   
                  /    .
rule              <- n: name _ '<-' _ body: choice '.' _ -> (format(["function parse_",
           getvar("n"),
           "(pos) { ",
           "let fn = ", nextfn(), "; ",
           "let state = { pos: pos, valid: true }; ",
           "let getvar = (k) => getvar_(fn, pos, k); ",
           "let setvar = (k, v) => setvar_(fn, pos, k, v); ",
           getvar("body"),
           " return state; }"]))
 .
grammar           <- _ r: rule g: grammar -> (format([getvar("r"), " ", getvar("g")]))
 
                  / _ r: rule -> (format(["// This is from a template in peg.org:\n", getvar("r"), 
   ` function parse_char(pos) {
     if (pos >= input.length) return { valid: false };
     return { pos: pos + 1, val: input.charAt(pos), valid: true };
   }
   function literal(pos, string) {
     if (input.substr(pos, string.length) === string) {
       return { pos: pos + string.length, val: string, valid: true };
     } else return { valid: false };
   }

   let fnnum = 0
   let nextfn = () => {
     fnnum += 1
     return fnnum
   }
   let input = ""

   let varkey = (fn, pos, k) => [fn, pos, k].join('-')
   let getvar_ = (fn, pos, k) => {
     let kk = varkey(fn, pos, k)
     let i = varbuf.length - 1
     while (i >= 0) {
       if (varbuf[i][0] === kk) {
         let h = varbuf[i][1]
         return getstr(h)
       }
       i -= 1
     }
     return null
   }
   let setvar_ = (fn, pos, k, v) => {
     let kk = varkey(fn, pos, k)
     let h = storestr(v)
     varbuf.push([kk, h])
   }
   let storestr = (s) => {
     let handle = strbuf.length
     strbuf.push(s.length)
     s.split('').map(c => {
       strbuf.push(c)
     })
     return handle
   }
   let getstr = (h) => {
     let len = strbuf[h]
     return strbuf.slice(h+1, h+1+len).join('')
   }

   let stack = []
   let varbuf = []
   let strbuf = []

   let push = (o) => stack.push(o)
   let pop = () => stack.pop()

   let format = (parts) => {
     return parts.join('')
   }

   var fs = require(\'fs\');
   var grammarfile = process.argv.slice(2)[0];
   fs.readFile(grammarfile, function(err, data) {
       if (err) {
           throw err; 
       }
       input = data.toString()
       var out = parse_grammar(0);
       console.log(out.val);
       console.warn('strbuf size:', strbuf.length)
       console.warn('varbuf size:', varbuf.length)
   });`]))
 .
meta              <- '!'   
                  / '\''   
                  / '<-'   
                  / '/'   
                  / '.'   
                  / '('   
                  / ')'   
                  / ':'   
                  / '->'   .
name              <- c: namechar n: name -> (format([getvar("c"), getvar("n")]))
 
                  / namechar   .
namechar          <- !meta !sp char   .
term              <- labeled   
                  / nonterminal   
                  / string   
                  / negation   
                  / parenthesized   .
nonterminal       <- n: name _ -> (format(["state = parse_", getvar("n"), "(state.pos);"]))
 .
labeled           <- label: name _ ':' _ value: term -> (format([getvar("value"),
           " if (state.valid) {",
           " setvar(\"", getvar("label"), "\", state.val);",
           " }"]))
 .
sequence          <- foo: term  bar: sequence -> (format([getvar("foo"),
           " if (state.valid) { ",
           getvar("bar"),
           " } "]))
 
                  / result_expression   
                  /  -> ("")
 .
string            <- '\'' s: stringcontents '\'' _ -> (format(["state = literal(state.pos, \"",
           getvar("s"),
           "\");"]))
 .
stringcontents    <- !'\\' !'\'' c: char s: stringcontents -> (format([getvar("c"), getvar("s")]))
 
                  / b: '\\' c: char s: stringcontents -> (format([getvar("b"), getvar("c"), getvar("s")]))
 
                  /  -> ("")
 .
choice            <- a: sequence '/' _  b: choice -> (format(["push(state); ",
	      getvar("a"),
	      " if (!state.valid) { state = pop(); ",
	      getvar("b"),
	      "} else { pop(); }"]))
 
                  / sequence   .
negation          <- '!' _ t: term -> (format([" push(state);",
            getvar("t"), 
            "if (state.valid) { pop(); state.valid = false; }",
            "else { state = pop(); }"]))
 .
result_expression <- '->' _ result: expr _ -> (format(["if (state.valid) { state.val = ",
           getvar("result"),
           "; }"]))
 .
expr              <- '(' _ e: exprcontents ')' -> (format(["(", getvar("e"), ")"]))
 .
exprcontents      <- c: (!'(' !')' (location / char) / expr) e: exprcontents -> (format([getvar("c"), getvar("e")]))
 
                  /  -> ("")
 .
location          <- 'ยง' n: name -> ("POOP")
 .
parenthesized     <- '(' _ body: choice ')' _ -> (format([getvar("body")]))
 .
#+end_example

** Experiment with typesetting

This is a quick-and-dirty experiment with generating a nice looking
TeX-typset version of the PEG. 

#+NAME: guido
#+BEGIN_SRC python :var rules=rules
  import re
  out = ['\input cwebmac \halign{\strut\hfil#\hfil\quad&#\hfil\quad&#\hfil\quad&#\hfil\quad&\hfil#\cr']
  for (name, larrow, body, rarrow, action, end) in rules:
      if larrow == '<-':
	  larrow = '\\leftarrow '
      if rarrow == '->':
	  rarrow = '\\rightarrow '
      body = body.replace('\\', '\\\\')
      #body = re.sub(r"'(\\\'|[^']+)'", r"\\vb{\\tt '\1'}", body)
      out.append(f"{name} & {larrow} & {body} & {rarrow} & {end} \cr")
  out.append('}\n\\bye\n')
  output = '\n'.join(out)
  open('output.tex', 'w').write(output)
  return output
#+END_SRC

#+RESULTS: guido
#+begin_example
\input cwebmac \halign{\strut\hfil#\hfil\quad&#\hfil\quad&#\hfil\quad&#\hfil\quad&\hfil#\cr
sp & \leftarrow  & ' ' &  &  \cr
 & / & '\\n' &  &  \cr
 & / & '\\t' &  & . \cr
sps & \leftarrow  & sp sps &  &  \cr
 & / &  &  & . \cr
rule & \leftarrow  & n: name sps '<-' sps body: choice '.' sps & \rightarrow  & . \cr
grammar & \leftarrow  & sps r: rule g: grammar & \rightarrow  &  \cr
 & / & sps r: rule & \rightarrow  & . \cr
meta & \leftarrow  & '!' &  &  \cr
 & / & '\\'' &  &  \cr
 & / & '<-' &  &  \cr
 & / & '/' &  &  \cr
 & / & '.' &  &  \cr
 & / & '(' &  &  \cr
 & / & ')' &  &  \cr
 & / & ':' &  &  \cr
 & / & '->' &  & . \cr
name & \leftarrow  & c: namechar n: name & \rightarrow  &  \cr
 & / & namechar &  & . \cr
namechar & \leftarrow  & !meta !sp char &  & . \cr
term & \leftarrow  & labeled &  &  \cr
 & / & nonterminal &  &  \cr
 & / & string &  &  \cr
 & / & negation &  &  \cr
 & / & parenthesized &  & . \cr
nonterminal & \leftarrow  & n: name sps & \rightarrow  & . \cr
labeled & \leftarrow  & label: name sps ':' sps value: term & \rightarrow  & . \cr
sequence & \leftarrow  & foo: term  bar: sequence & \rightarrow  &  \cr
 & / & result_expression &  &  \cr
 & / &  & \rightarrow  & . \cr
string & \leftarrow  & '\\'' s: stringcontents '\\'' sps & \rightarrow  & . \cr
stringcontents & \leftarrow  & !'\\\\' !'\\'' c: char s: stringcontents & \rightarrow  &  \cr
 & / & b: '\\\\' c: char s: stringcontents & \rightarrow  &  \cr
 & / &  & \rightarrow  & . \cr
choice & \leftarrow  & a: sequence '/' sps  b: choice & \rightarrow  &  \cr
 & / & sequence &  & . \cr
negation & \leftarrow  & '!' sps t: term & \rightarrow  & . \cr
result_expression & \leftarrow  & '->' sps result: expr sps & \rightarrow  & . \cr
expr & \leftarrow  & '(' sps e: exprcontents ')' & \rightarrow  & . \cr
exprcontents & \leftarrow  & c: (!'(' !')' (location / char) / expr) e: exprcontents & \rightarrow  &  \cr
 & / &  & \rightarrow  & . \cr
location & \leftarrow  & 'ยง' n: name & \rightarrow  & . \cr
parenthesized & \leftarrow  & '(' sps body: choice ')' sps & \rightarrow  & . \cr
}
\bye
#+end_example

** Concatenate all of the javascript source blocks into one block to make my life easier

We need a way to get the templates that have been broken out into
source blocks in this document. There's probably a better way, but the
easiest thing I could figure out was to read the current file into
memory and use regexes to get at each of the source blocks. This is
probably pretty fragile so we should consider something better.

#+NAME: js_src_blocks
#+BEGIN_SRC python
  import re
  this = open(filename).read()
  blocks = dict(re.findall(r'#\+NAME:\s*(\S+)\s+#\+BEGIN_SRC js\s+(.+?)#\+END_SRC', this, re.MULTILINE|re.DOTALL))
#+END_SRC

* Action Templates

  The (high-level) operations our parser needs to operate are:

  - Function calls (Jumping to labels)
  - Recursion (can be implemented by hand with stacks)
  - Stacks to save state between alternatives
  - String templating with variable interpolation
  - If statements
  - Saving of named variables during a function lifetime
  - Invalid state
  - Matching string literals
  - Concatenation of strings
  - Reading/writing, input/output
  
** rule_template

   Each rule is represented and generated as a single function. These
   function need to support recursive and mutually-recusive calls.

   Upon entry, each invocation saves the current position and creates
   a new stack for itself.

   Then the generated body is run and whatever the state is at the end
   is returned to the caller.

*** A series templates
#+NAME: rule_template
#+BEGIN_SRC js
(`// This is from a template in b.peg
function parse_${n}(input, pos) {
      var state = { pos: pos };
      var stack = [];
      ${body}
      return state;
}`)
#+END_SRC

*** B series templates
#+NAME: B.rule_template
#+BEGIN_SRC js
(format(['function parse_', n, '(input, pos) { var state = { pos: pos }; var stack = []; ',
         body, ' return state; }']))
#+END_SRC

*** CLANG series templates (not used)
#+NAME: CLANG.rule_template
#+BEGIN_SRC js
(format(['State parse_', n, '(str input, int pos) { State state = { .pos=pos }; Stack stack = {0}; ',
         body, ' return state; }']))
#+END_SRC

*** C
#+NAME: C.rule_template
#+BEGIN_SRC js
  (format(['function parse_',
           n,
           '(input, pos) { let state = { pos: pos }; let stack = []; ',
           'let vars = {}',
           body,
           ' return state; }']))
#+END_SRC

*** D series templates
#+NAME: D.rule_template
#+BEGIN_SRC js
  (format(["function parse_",
           vars["n"],
           "(input, pos) { let state = { pos: pos }; ",
           "let vars = {}; ",
           "let getvar = (k) => vars[k]; ",
           "let setvar = (k, v) => { vars[k] = v; }; ",
           vars["body"],
           " return state; }"]))
#+END_SRC

*** E series templates
#+NAME: E.rule_template
#+BEGIN_SRC js
  (format(["function parse_",
           getvar("n"),
           "(pos) { ",
           "let fn = ", nextfn(), "; ",
           "let state = { pos: pos, valid: true }; ",
           "let getvar = (k) => getvar_(fn, pos, k); ",
           "let setvar = (k, v) => setvar_(fn, pos, k, v); ",
           getvar("body"),
           " return state; }"]))
#+END_SRC

** labeled_template
*** A series templates
#+NAME: labeled_template
#+BEGIN_SRC js
(`${value} if (state) { var ${label} = state.val; }\n`)
#+END_SRC

*** B series templates
#+NAME: B.labeled_template
#+BEGIN_SRC js
(format([value, ' if (state) { var ', label, ' = state.val; }']))
#+END_SRC

*** CLANG series templates (not used)
#+NAME: CLANG.labeled_template
#+BEGIN_SRC js
(format([value, ' if (valid) { var("', label, '", state.val); }']))
#+END_SRC

#+NAME: C.labeled_template
#+BEGIN_SRC js
  (format([value,
           ' if (state) { vars["',
           label,
           '"] = state.val; }']))
#+END_SRC

*** D series templates
#+NAME: D.labeled_template
#+BEGIN_SRC js
  (format([vars["value"],
           " if (state) { vars[\"",
           vars["label"],
           "\"] = state.val; }"]))
#+END_SRC

*** E series templates
#+NAME: E.labeled_template
#+BEGIN_SRC js
  (format([getvar("value"),
           " if (state.valid) {",
           " setvar(\"", getvar("label"), "\", state.val);",
           " }"]))
#+END_SRC

** result_expr_template
*** A series templates
#+NAME: result_expr_template
#+BEGIN_SRC js
(`if (state) state.val = ${result};\n`)
#+END_SRC

*** B series templates
#+NAME: B.result_expr_template
#+BEGIN_SRC js
(format(['if (state) { state.val = ', result, '; }']))
#+END_SRC

*** CLANG series templates (not used)
#+NAME: CLANG.result_expr_template
#+BEGIN_SRC js
  (format(['if (valid) { state.val = ',
           result,
           '; }']))
#+END_SRC

*** D series templates
#+NAME: D.result_expr_template
#+BEGIN_SRC js
  (format(["if (state) { state.val = ",
           vars["result"],
           "; }"]))
#+END_SRC

*** E series templates
#+NAME: E.result_expr_template
#+BEGIN_SRC js
  (format(["if (state.valid) { state.val = ",
           getvar("result"),
           "; }"]))
#+END_SRC

** negation_template
*** A series templates
#+NAME: negation_template
#+BEGIN_SRC js
(` stack.push(state);
   ${t}
   if (state) {
     stack.pop();
     state = null;
   } else { state = stack.pop(); }`)
#+END_SRC

*** B series templates
#+NAME: B.negation_template
#+BEGIN_SRC js
  (format([' stack.push(state);', t, 
	   'if (state) { stack.pop(); state = null; }',
	   'else { state = stack.pop(); }']))
#+END_SRC

*** CLANG (not used)
#+NAME: CLANG.negation_template
#+BEGIN_SRC js
  (format([' push(state);', t, 
	   'if (valid) { pop(); state.null = true; }',
	   'else { state = pop(); }']))
#+END_SRC

*** C
#+NAME: C.negation_template
#+BEGIN_SRC js
   (format([' stack.push(state);',
            t, 
            'if (state) { stack.pop(); state = null; }',
            'else { state = stack.pop(); }']))
#+END_SRC

*** D series templates
#+NAME: D.negation_template
#+BEGIN_SRC js
   (format([" push(state);",
            vars["t"], 
            "if (state) { pop(); state = null; }",
            "else { state = pop(); }"]))
#+END_SRC

*** E series templates
#+NAME: E.negation_template
#+BEGIN_SRC js
   (format([" push(state);",
            getvar("t"), 
            "if (state.valid) { pop(); state.valid = false; }",
            "else { state = pop(); }"]))
#+END_SRC

** choice_template
*** A series templates
#+NAME: choice_template
#+BEGIN_SRC js
(`stack.push(state); ${a} if (!state) {state = stack.pop(); ${b}} else { stack.pop(); }`)
#+END_SRC

*** B series templates
#+NAME: B.choice_template
#+BEGIN_SRC js
     (format(['stack.push(state); ',
	      a,
	      ' if (!state) {state = stack.pop(); ',
	      b,
	      '} else { stack.pop(); }']))
#+END_SRC

*** CLANG (not used)
#+NAME: CLANG.choice_template
#+BEGIN_SRC js
     (format(['push(state); ',
	      a,
	      ' if (invalid) { state = pop(); ',
	      b,
	      '} else { pop(); }']))
#+END_SRC

*** C
#+NAME: C.choice_template
#+BEGIN_SRC js
     (format(['stack.push(state); ',
	      a,
	      ' if (!state) {state = stack.pop(); ',
	      b,
	      '} else { stack.pop(); }']))
#+END_SRC

*** D series templates
#+NAME: D.choice_template
#+BEGIN_SRC js
     (format(["push(state); ",
	      vars["a"],
	      " if (!state) {state = pop(); ",
	      vars["b"],
	      "} else { pop(); }"]))
#+END_SRC

*** E series templates
#+NAME: E.choice_template
#+BEGIN_SRC js
     (format(["push(state); ",
	      getvar("a"),
	      " if (!state.valid) { state = pop(); ",
	      getvar("b"),
	      "} else { pop(); }"]))
#+END_SRC

** string_template
*** A series templates
#+NAME: string_template
#+BEGIN_SRC js
(`state = literal(input, state.pos, '${s}');\n`)
#+END_SRC

*** B series templates
#+NAME: B.string_template
#+BEGIN_SRC js
(format(['state = literal(input, state.pos, \'', s, '\');']))
#+END_SRC

*** C
#+NAME: C.string_template
#+BEGIN_SRC js
  (format(['state = literal(input, state.pos, \"',
           s,
           '\");']))
#+END_SRC

*** D series templates
#+NAME: D.string_template
#+BEGIN_SRC js
  (format(["state = literal(input, state.pos, \"",
           vars["s"],
           "\");"]))
#+END_SRC

*** E series templates
#+NAME: E.string_template
#+BEGIN_SRC js
  (format(["state = literal(state.pos, \"",
           getvar("s"),
           "\");"]))
#+END_SRC

** sequence_template1
*** A series templates
#+NAME: sequence_template1
#+BEGIN_SRC js
(`${foo}  if (state) { ${bar} }\n`)
#+END_SRC

*** B series templates
#+NAME: B.sequence_template1
#+BEGIN_SRC js
(format([foo, ' if (state) { ', bar, ' } ']))
#+END_SRC

*** CLANG series templates (not used)
#+NAME: CLANG.sequence_template1
#+BEGIN_SRC js
  (format([foo,
           ' if (valid) { ',
           bar,
           ' } ']))
#+END_SRC

*** D series templates
#+NAME: D.sequence_template1
#+BEGIN_SRC js
  (format([vars["foo"],
           " if (state) { ",
           vars["bar"],
           " } "]))
#+END_SRC

*** E series templates
#+NAME: E.sequence_template1
#+BEGIN_SRC js
  (format([getvar("foo"),
           " if (state.valid) { ",
           getvar("bar"),
           " } "]))
#+END_SRC

** sequence_template2
*** A series templates
#+NAME: sequence_template2
#+BEGIN_SRC js
('')
#+END_SRC

*** D series templates
#+NAME: D.sequence_template2
#+BEGIN_SRC js
("")
#+END_SRC

** stringcontents_template1
*** A series templates
#+NAME: stringcontents_template1
#+BEGIN_SRC js
(c + s)
#+END_SRC

*** D series templates
#+NAME: D.stringcontents_template1
#+BEGIN_SRC js
(format([vars["c"], vars["s"]]))
#+END_SRC

*** E series templates
#+NAME: E.stringcontents_template1
#+BEGIN_SRC js
(format([getvar("c"), getvar("s")]))
#+END_SRC

** stringcontents_template2
*** A series templates
#+NAME: stringcontents_template2
#+BEGIN_SRC js
(b + c + s)
#+END_SRC

*** D series templates
#+NAME: D.stringcontents_template2
#+BEGIN_SRC js
(format([vars["b"], vars["c"], vars["s"]]))
#+END_SRC

*** E series templates
#+NAME: E.stringcontents_template2
#+BEGIN_SRC js
(format([getvar("b"), getvar("c"), getvar("s")]))
#+END_SRC

** stringcontents_template3
*** A series templates
#+NAME: stringcontents_template3
#+BEGIN_SRC js
("")
#+END_SRC

*** D series templates
#+NAME: D.stringcontents_template3
#+BEGIN_SRC js
("")
#+END_SRC

** expr_template
*** A series templates
#+NAME: expr_template
#+BEGIN_SRC js
("(" + e + ")")
#+END_SRC

*** D series templates
#+NAME: D.expr_template
#+BEGIN_SRC js
(format(["(", vars["e"], ")"]))
#+END_SRC

*** E series templates
#+NAME: E.expr_template
#+BEGIN_SRC js
(format(["(", getvar("e"), ")"]))
#+END_SRC

** exprcontents_template1
*** A series templates
#+NAME: exprcontents_template1
#+BEGIN_SRC js
(c + e)
#+END_SRC

*** D series templates
#+NAME: D.exprcontents_template1
#+BEGIN_SRC js
(format([vars["c"], vars["e"]]))
#+END_SRC

*** E series templates
#+NAME: E.exprcontents_template1
#+BEGIN_SRC js
(format([getvar("c"), getvar("e")]))
#+END_SRC

** exprcontents_template2
*** A series templates
#+NAME: exprcontents_template2
#+BEGIN_SRC js
("")
#+END_SRC

*** D series templates
#+NAME: D.exprcontents_template2
#+BEGIN_SRC js
("")
#+END_SRC

** nonterminal_template
*** A series templates
#+NAME: nonterminal_template
#+BEGIN_SRC js
(`state = parse_${n}(input, state.pos);\n`)
#+END_SRC

*** B series templates
#+NAME: B.nonterminal_template
#+BEGIN_SRC js
(format(['state = parse_', n, '(input, state.pos);']))
#+END_SRC

*** D series templates
#+NAME: D.nonterminal_template
#+BEGIN_SRC js
(format(["state = parse_", vars["n"], "(input, state.pos);"]))
#+END_SRC

*** E series templates
#+NAME: E.nonterminal_template
#+BEGIN_SRC js
(format(["state = parse_", getvar("n"), "(state.pos);"]))
#+END_SRC

** grammar_template1
*** A series templates
#+NAME: grammar_template1
#+BEGIN_SRC js
(`${r}\n${g}`)
#+END_SRC

*** B series templates
#+NAME: B.grammar_template1
#+BEGIN_SRC js
(format([r, " ", g]))
#+END_SRC

*** D series templates
#+NAME: D.grammar_template1
#+BEGIN_SRC js
(format([vars["r"], " ", vars["g"]]))
#+END_SRC

*** E series templates
#+NAME: E.grammar_template1
#+BEGIN_SRC js
(format([getvar("r"), " ", getvar("g")]))
#+END_SRC

** grammar_template2
*** A series templates
#+NAME: grammar_template2
#+BEGIN_SRC js
  ('// This is from a template in peg.org:\n' + r +
   ` function parse_char(input, pos) {
     if (pos >= input.length) return null;
     return { pos: pos + 1, val: input.charAt(pos) };
   }
   function literal(input, pos, string) {
     if (input.substr(pos, string.length) === string) {
       return { pos: pos + string.length, val: string };
     } else return null;
   }
   let format = (parts) => parts.join('')
   var fs = require(\'fs\');
   var grammarfile = process.argv.slice(2)[0];
   fs.readFile(grammarfile, function(err, data) {
       if (err) {
	   throw err; 
       }
       var out = parse_grammar(data.toString(), 0);
       console.log(out.val);
   });`)
#+END_SRC

*** D series templates
#+NAME: D.grammar_template2
#+BEGIN_SRC js
  (format(["// This is from a template in peg.org:\n", vars["r"], 
   ` function parse_char(input, pos) {
     if (pos >= input.length) return null;
     return { pos: pos + 1, val: input.charAt(pos) };
   }
   function literal(input, pos, string) {
     if (input.substr(pos, string.length) === string) {
       return { pos: pos + string.length, val: string };
     } else return null;
   }

   let fnnum = 0
   let nextfn = () => {
     fnnum += 1
     return fnnum
   }
   let stack = []
   let push = (o) => stack.push(o)
   let pop = () => stack.pop()

   let format = (parts) => {
     return parts.join('')
   }
   var fs = require(\'fs\');
   var grammarfile = process.argv.slice(2)[0];
   fs.readFile(grammarfile, function(err, data) {
       if (err) {
           throw err; 
       }
       var out = parse_grammar(data.toString(), 0);
       console.log(out.val);
   });`]))
#+END_SRC

*** E series templates
#+NAME: E.grammar_template2
#+BEGIN_SRC js
  (format(["// This is from a template in peg.org:\n", getvar("r"), 
   ` function parse_char(pos) {
     if (pos >= input.length) return { valid: false };
     return { pos: pos + 1, val: input.charAt(pos), valid: true };
   }
   function literal(pos, string) {
     if (input.substr(pos, string.length) === string) {
       return { pos: pos + string.length, val: string, valid: true };
     } else return { valid: false };
   }

   let fnnum = 0
   let nextfn = () => {
     fnnum += 1
     return fnnum
   }
   let input = ""

   let varkey = (fn, pos, k) => [fn, pos, k].join('-')
   let getvar_ = (fn, pos, k) => {
     let kk = varkey(fn, pos, k)
     let i = varbuf.length - 1
     while (i >= 0) {
       if (varbuf[i][0] === kk) {
         let h = varbuf[i][1]
         return getstr(h)
       }
       i -= 1
     }
     return null
   }
   let setvar_ = (fn, pos, k, v) => {
     let kk = varkey(fn, pos, k)
     let h = storestr(v)
     varbuf.push([kk, h])
   }
   let storestr = (s) => {
     let handle = strbuf.length
     strbuf.push(s.length)
     s.split('').map(c => {
       strbuf.push(c)
     })
     return handle
   }
   let getstr = (h) => {
     let len = strbuf[h]
     return strbuf.slice(h+1, h+1+len).join('')
   }

   let stack = []
   let varbuf = []
   let strbuf = []

   let push = (o) => stack.push(o)
   let pop = () => stack.pop()

   let format = (parts) => {
     return parts.join('')
   }

   var fs = require(\'fs\');
   var grammarfile = process.argv.slice(2)[0];
   fs.readFile(grammarfile, function(err, data) {
       if (err) {
           throw err; 
       }
       input = data.toString()
       var out = parse_grammar(0);
       console.log(out.val);
       console.warn('strbuf size:', strbuf.length)
       console.warn('varbuf size:', varbuf.length)
   });`]))
#+END_SRC

*** CLANG series templates (not used)
#+NAME: CLANG.grammar_template2
#+BEGIN_SRC js
(format([r, "\n// END\n"]))
#+END_SRC js

** name_template
*** A series templates
#+NAME: name_template
#+BEGIN_SRC js
(c + n)
#+END_SRC

*** D series templates
#+NAME: D.name_template
#+BEGIN_SRC js
(format([vars["c"], vars["n"]]))
#+END_SRC

*** E series templates
#+NAME: E.name_template
#+BEGIN_SRC js
(format([getvar("c"), getvar("n")]))
#+END_SRC

** location_template:
*** A series templates
#+NAME: location_template
#+BEGIN_SRC js
("POOP")
#+END_SRC

*** D series templates
#+NAME: D.location_template
#+BEGIN_SRC js
("POOP")
#+END_SRC

** body_template
*** A series templates
#+NAME: body_template
#+BEGIN_SRC js
(body)
#+END_SRC

*** D series templates
#+NAME: D.body_template
#+BEGIN_SRC js
(format([vars["body"]]))
#+END_SRC

*** E series templates
#+NAME: E.body_template
#+BEGIN_SRC js
(format([getvar("body")]))
#+END_SRC

* C Helper Functions (not used)

#+NAME: c_include
#+BEGIN_SRC c

  #include <stdbool.h>
  #include <stdio.h>
  #include <stdlib.h>
  #define GB_STRING_IMPLEMENTATION
  #include "gb_string.h"

  typedef gbString str;

  typedef struct State {
      int pos;
      str val;
      bool null;
  } State;

  typedef struct Stack {
      State states[32];
      int n;
  } Stack;

  typedef struct Variable {
      str key;
      str value;
  } Variable;

  typedef struct Variables {
      Variable items[32];
      int n;
  } Variables;

  #define valid (!state.null)
  #define invalid (state.null)
  #define var(key, value) vars.items[vars.n++] = (Variable){.key=copy(key), .value=copy(value)};
  #define push(o) stack.states[stack.n++] = o
  #define pop() stack.states[--stack.n];

#+END_SRC

