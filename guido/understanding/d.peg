sp <- ' ' / '\n' / '\t' .
_ <- sp _ / .
rule <- n: name _ '<-'_ body: choice '.'_ ->
               (format("// This is from a template in d.peg (1)\n"
               "State parse_${n}(str input, int pos) {\n"
               "      State state = { .pos=pos, .valid=true };\n"
               "      Stack stack = { 0 };\n"
               "      Variables vars = { 0 };\n"
               "      // Not sure where this body is coming from\n"
               "      ${body}\n"
               "      return state;\n"
               "}", &vars)).
sentence <- _ r: rule g: sentence -> (format("${r}\n${g}", &vars))
          / _ r: rule -> (format("// This is from a template in d.peg (2), variable r is next:\n"
               " ${r}\n"
               " // This is from a template in d.peg, just finished with variable r\n"
               " State parse_char(str input, int pos) {\n"
               "   if (pos >= len(input)) return null();\n"
               "   return (State){ .pos=pos+1, .val=copy(&input[pos], 1), .valid=true };\n"
               " }\n"
               " State literal(str input, int pos, str string) {\n"
               "   if (strncmp(&input[pos], string, len(string)) == 0) {\n"
               "     return (State){ .pos=pos+len(string), .val=string, .valid=true };\n"
               "   } else return null();\n"
               " }\n"
               " State literal(str input, int pos, char* string) {\n"
               "   str s = gb_make_string(string);\n"
               "   if (strncmp(&input[pos], s, strlen(s)) == 0) {\n"
               "     return (State){ .pos=pos+len(s), .val=s, .valid=true };\n"
               "   } else return null();\n"
               " }\n"
	       "int main(int argc, char ** argv) {\n"
               " str src = read(argv[1]);\n"
               " State out = parse_sentence(src, 0);\n"
               " printf(\"%s\\n\", out.val);\n }", &vars)).
meta     <- '!' / '\'' / '<-' / '/' / '.' / '(' / ')' / ':' / '->'.
name     <- c: namechar n: name -> (format("${c}${n}", &vars)) / namechar.
namechar <- !meta !sp char.
term <- labeled / nonterminal / string / negation / parenthesized.
nonterminal <- n: name _ -> (format(" state = parse_${n}(input, state.pos);\n", &vars)).
labeled <- label: name _ ':'_ value: term ->
               (format("${value} if (state.valid) { remember(\"${label}\", state.val); } \n", &vars)).
sequence <- foo: term  bar: sequence ->
                   (format("${foo} if (state.valid) { ${bar} }\n", &vars))
               / result_expression / -> ("").
string <- '\'' s: stringcontents '\''_ ->
             (format(" state = literal(input, state.pos, \"${s}\");\n", &vars)) .
stringcontents <-   !'\\' !'\'' c: char  s: stringcontents -> (format("${c}${s}", &vars))
                / b: '\\'       c: char  s: stringcontents -> (format("${b}${c}${s}", &vars))
                / -> ("").
choice <- a: sequence '/'_  b: choice ->
                  (format("  push(state);\n"
                      "${a}\n"
                      "if (!state.valid) {\n"
                      "  state = pop();\n"
                      "  ${b}\n"
                      "} else { pop(); }", &vars))
              / sequence.
negation <- '!'_ t: term ->
                (format("push(state);\n"
                  "${t}\n"
                  "if (state.valid) {\n"
                  "  pop();\n"
                  "  state = null();\n"
                  "} else { state = pop(); }", &vars)).

result_expression <- '->'_ result: expr _ ->
                         (format("if (state.valid) { state.val = ${result}; }\n", &vars))
                     .
expr         <- '('_ e: exprcontents ')' -> (format("(${e})", &vars)).
exprcontents <- c: (!'(' !')' char / expr)  e: exprcontents -> (format("${c}${e}", &vars))
              / -> ("").
parenthesized <- '('_ body: choice ')'_ -> (vars.values[0]).
