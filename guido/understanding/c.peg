sp <- ' ' / '\n' / '\t' .
_ <- sp _ / .
rule <- n: name _ '<-'_ body: choice '.'_ ->
               (`// This is from a template in c.peg
               State parse_${n}(str input, int pos) {
                     State state = { .pos=pos, .valid=true };
                     Stack stack = { 0 };
		     Variables vars = { 0 };
                     // Not sure where this body is coming from
                     ${body}
                     return state;
                }`).
sentence <- _ r: rule g: sentence -> (`${r}\n${g}`)
          / _ r: rule -> (`// This is from a template in c.peg, variable r is next:
                ${r}
                // This is from a template in c.peg, just finished with variable r
                State parse_char(str input, int pos) {
                  if (pos >= len(input)) return null();
                  return (State){ .pos=pos+1, .val=copy(&input[pos], 1), .valid=true };
                }
                State literal(str input, int pos, char* string) {
		  str s = gb_make_string(string);
                  if (strncmp(&input[pos], s, strlen(s)) == 0) {
                    return (State){ .pos=pos+len(s), .val=s, .valid=true };
                  } else return null();
                }
		int main(int argc, char ** argv) {
                  str src = read(argv[1]);
                  State out = parse_sentence(src, 0);                
                  printf("%s\\n", out.val);
		}
                `
            ).
meta     <- '!' / '\'' / '<-' / '/' / '.' / '(' / ')' / ':' / '->'.
name     <- c: namechar n: name -> (c + n) / namechar.
namechar <- !meta !sp char.
term <- labeled / nonterminal / string / negation / parenthesized.
nonterminal <- n: name _ -> (`  state = parse_${n}(input, state.pos);\n`).
labeled <- label: name _ ':'_ value: term ->
               (`${value} if (state.valid) { remember("${label}", state.val); }\n`) .
sequence <- foo: term  bar: sequence ->
                   (`${foo}  if (state.valid) { ${bar} }\n`)
               / result_expression / -> ('').
string <- '\'' s: stringcontents '\''_ ->
             (`  state = literal(input, state.pos, "${s}");\n`) .
stringcontents <-   !'\\' !'\'' c: char  s: stringcontents -> (c + s)
                / b: '\\'       c: char  s: stringcontents -> (b + c + s)
                / -> ('').
choice <- a: sequence '/'_  b: choice ->
                  (`  push(state);
                      ${a}
                      if (!state.valid) {
                        state = pop();
                        ${b}
                      } else { pop(); }`)
              / sequence.
negation <- '!'_ t: term ->
                (`push(state);
                  ${t}
                  if (state.valid) {
                    pop();
                    state = null();
                  } else { state = pop(); }`).

result_expression <- '->'_ result: expr _ ->
                         (`if (state.valid) { state.val = ${result}; };\n`)
                     .
expr         <- '('_ e: exprcontents ')' -> (`(${e})`).
exprcontents <- c: (!'(' !')' char / expr)  e: exprcontents -> (c + e)
              / -> ('').
parenthesized <- '('_ body: choice ')'_ -> (body).
