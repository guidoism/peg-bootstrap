sp                <- ' '   
                  / '\n'   
                  / '\t'   .
_               <- sp _   
                  /    .
rule              <- n: name _ '<-' _ body: choice '.' _ -> (format(["function parse_",
           vars["n"],
           "(input, pos) { let state = { pos: pos }; ",
           "let vars = {}; ",
           "let getvar = (k) => vars[k]; ",
           "let setvar = (k, v) => { vars[k] = v; }; ",
           vars["body"],
           " return state; }"]))
 .
grammar           <- _ r: rule g: grammar -> (format([vars["r"], " ", vars["g"]]))
 
                  / _ r: rule -> (format(["// This is from a template in peg.org:\n", vars["r"], 
   ` function parse_char(input, pos) {
     if (pos >= input.length) return null;
     return { pos: pos + 1, val: input.charAt(pos) };
   }
   function literal(input, pos, string) {
     if (input.substr(pos, string.length) === string) {
       return { pos: pos + string.length, val: string };
     } else return null;
   }

   let fnnum = 0
   let nextfn = () => {
     fnnum += 1
     return fnnum
   }
   let stack = []
   let push = (o) => stack.push(o)
   let pop = () => stack.pop()

   let format = (parts) => {
     return parts.join('')
   }
   var fs = require(\'fs\');
   var grammarfile = process.argv.slice(2)[0];
   fs.readFile(grammarfile, function(err, data) {
       if (err) {
           throw err; 
       }
       var out = parse_grammar(data.toString(), 0);
       console.log(out.val);
   });`]))
 .
meta              <- '!'   
                  / '\''   
                  / '<-'   
                  / '/'   
                  / '.'   
                  / '('   
                  / ')'   
                  / ':'   
                  / '->'   .
name              <- c: namechar n: name -> (format([vars["c"], vars["n"]]))
 
                  / namechar   .
namechar          <- !meta !sp char   .
term              <- labeled   
                  / nonterminal   
                  / string   
                  / negation   
                  / parenthesized   .
nonterminal       <- n: name _ -> (format(["state = parse_", vars["n"], "(input, state.pos);"]))
 .
labeled           <- label: name _ ':' _ value: term -> (format([vars["value"],
           " if (state) { vars[\"",
           vars["label"],
           "\"] = state.val; }"]))
 .
sequence          <- foo: term  bar: sequence -> (format([vars["foo"],
           " if (state) { ",
           vars["bar"],
           " } "]))
 
                  / result_expression   
                  /  -> ("")
 .
string            <- '\'' s: stringcontents '\'' _ -> (format(["state = literal(input, state.pos, \"",
           vars["s"],
           "\");"]))
 .
stringcontents    <- !'\\' !'\'' c: char s: stringcontents -> (format([vars["c"], vars["s"]]))
 
                  / b: '\\' c: char s: stringcontents -> (format([vars["b"], vars["c"], vars["s"]]))
 
                  /  -> ("")
 .
choice            <- a: sequence '/' _  b: choice -> (format(["push(state); ",
	      vars["a"],
	      " if (!state) {state = pop(); ",
	      vars["b"],
	      "} else { pop(); }"]))
 
                  / sequence   .
negation          <- '!' _ t: term -> (format([" push(state);",
            vars["t"], 
            "if (state) { pop(); state = null; }",
            "else { state = pop(); }"]))
 .
result_expression <- '->' _ result: expr _ -> (format(["if (state) { state.val = ",
           vars["result"],
           "; }"]))
 .
expr              <- '(' _ e: exprcontents ')' -> (format(["(", vars["e"], ")"]))
 .
exprcontents      <- c: (!'(' !')' (location / char) / expr) e: exprcontents -> (format([vars["c"], vars["e"]]))
 
                  /  -> ("")
 .
location          <- 'ยง' n: name -> ("POOP")
 .
parenthesized     <- '(' _ body: choice ')' _ -> (format([vars["body"]]))
 .