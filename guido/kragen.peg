sp <- ' ' / '\n' / '\t' .
_ <-sp _ / .
rule <- n: name _ '<-'_ body: choice '.'_ ->
               (`function parse_${n}(input, pos) {
                     var state = { pos: pos };
                     var stack = [];
                     ${body}
                     return state;
                }`).
sentence <- _ r: rule g: sentence -> (`${r}\n${g}`)
          / _ r: rule -> (`${r}
                function parse_char(input, pos) {
                  if (pos >= input.length) return null;
                  return { pos: pos + 1, val: input.charAt(pos) };
                }
                function literal(input, pos, string) {
                  if (input.substr(pos, string.length) === string) {
                    return { pos: pos + string.length, val: string };
                  } else return null;
                }
                var fs = require(\'fs\');
                fs.readFile(__dirname + \'/kragen.peg\', function(err, data) {
                    if (err) {
                        throw err; 
                    }
                    var out = parse_sentence(data.toString(), 0);
                    console.log(out.val);
                });`
            ).
meta     <- '!' / '\'' / '<-' / '/' / '.' / '(' / ')' / ':' / '->'.
name     <- c: namechar n: name -> (c + n) / namechar.
namechar <- !meta !sp char.
term <- labeled / nonterminal / string / negation / parenthesized.
nonterminal <- n: name _ -> (`  state = parse_${n}(input, state.pos);\n`).
labeled <- label: name _ ':'_ value: term ->
               (`${value} if (state) var ${label} = state.val;\n`) .
sequence <- foo: term  bar: sequence ->
                   (`${foo}  if (state) { ${bar} }\n`)
               / result_expression / -> ('').
string <- '\'' s: stringcontents '\''_ ->
             (`  state = literal(input, state.pos, '${s}');\n`) .
stringcontents <-   !'\\' !'\'' c: char  s: stringcontents -> (c + s)
                / b: '\\'       c: char  s: stringcontents -> (b + c + s)
                / -> ('').
choice <- a: sequence '/'_  b: choice ->
                  (`  stack.push(state);
                      ${a}
                      if (!state) {
                        state = stack.pop();
                        ${b}
                      } else { stack.pop(); }`)
              / sequence.
negation <- '!'_ t: term ->
                (`stack.push(state);
                  ${t}
                  if (state) {
                    stack.pop();
                    state = null;
                  } else { state = stack.pop(); }`).

result_expression <- '->'_ result: expr _ ->
                         (`if (state) state.val = ${result};\n`)
                     .
expr         <- '('_ e: exprcontents ')' -> (`(${e})`).
exprcontents <- c: (!'(' !')' char / expr)  e: exprcontents -> (c + e)
              / -> ('').
parenthesized <- '('_ body: choice ')'_ -> (body).
